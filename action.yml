name: 'Run Playwright tests'
description: 'Runs Playwright tests via npm run test'
branding:
  icon: 'fast-forward'
  color: 'purple'

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4

    - name: Set default values for environment variables
      shell: bash
      run: |
        echo "WOPEE_SCREENSHOT_VALIDATION_ENABLED=${{ env.WOPEE_SCREENSHOT_VALIDATION_ENABLED || "true" }}" >> $GITHUB_ENV
        echo "WOPEE_COLLECT_PAGE_CONTENT=${{ env.WOPEE_COLLECT_PAGE_CONTENT || "true" }}" >> $GITHUB_ENV

    - name: Load client_payload.env → $GITHUB_ENV
      if: github.event.client_payload.env
      shell: bash
      run: |
        jq -r 'to_entries[]|"\(.key)=\(.value)"' <<< '${{ toJson(github.event.client_payload.env) }}' >> "$GITHUB_ENV"

    - name: Load .github/workflows/.env → $GITHUB_ENV
      shell: bash
      run: |
        if [ -f .github/workflows/.env ]; then
          grep -vE '^(#|$)' .github/workflows/.env \
            | grep -E '^[A-Za-z_][A-Za-z0-9_]*=' \
            >> "$GITHUB_ENV"
        fi

    - name: Receive code
      if: github.event_name == 'repository_dispatch' && github.event.client_payload.code != null
      shell: bash
      run: |
        rm -rf tests/*
        echo "${{ github.event.client_payload.code }}" | base64 --decode > tests/code.spec.ts

    - name: Set suite name if provided
      if: github.event_name == 'repository_dispatch' && github.event.client_payload.suite_name != null
      shell: bash
      run: |
        echo 'WOPEE_SUITE_NAME=${{ github.event.client_payload.suite.name }}' >> $GITHUB_ENV

    - name: Set suite uuid if provided
      if: github.event_name == 'repository_dispatch' && github.event.client_payload.suite.uuid != null
      shell: bash
      run: |
        echo 'WOPEE_SUITE_UUID=${{ github.event.client_payload.suite.uuid }}' >> $GITHUB_ENV

    - name: Set test case id if provided
      if: github.event_name == 'repository_dispatch' && github.event.client_payload.testCase.testCaseId != null
      shell: bash
      run: |
        echo "WOPEE_TEST_CASE_ID=${{ github.event.client_payload.testCase.testCaseId }}" >> $GITHUB_ENV

    - name: Set user story id if provided
      if: github.event_name == 'repository_dispatch' && github.event.client_payload.testCase.userStoryId != null
      shell: bash
      run: |
        echo "WOPEE_USER_STORY_ID=${{ github.event.client_payload.testCase.userStoryId }}" >> $GITHUB_ENV

    - name: Set TESTING_USERNAME
      if: github.event.client_payload.suiteAnalysisConfig != null && github.event.client_payload.suiteAnalysisConfig.username != null
      shell: bash
      run: |
        echo "TESTING_USERNAME=${{ github.event.client_payload.suiteAnalysisConfig.username }}" >> $GITHUB_ENV

    - name: Set TESTING__PASSWORD
      if: github.event.client_payload.suiteAnalysisConfig != null && github.event.client_payload.suiteAnalysisConfig.password != null
      shell: bash
      run: |
        echo "TESTING__PASSWORD=${{ github.event.client_payload.suiteAnalysisConfig.password }}" >> $GITHUB_ENV

    - name: Generate WOPEE_SUITE_NAME if not set
      if: env.WOPEE_SUITE_NAME
      shell: bash
      run: echo "WOPEE_SUITE_NAME=Testing-$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV

    - name: Run tests
      # env:
      #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   WOPEE_API_KEY: ${{ secrets.WOPEE_API_KEY }}
      #   WOPEE_API_URL: ${{ vars.WOPEE_API_URL || 'https://api.wopee.io' }}
      #   WOPEE_PROJECT_UUID: ${{ vars.WOPEE_PROJECT_UUID }}
      #   WOPEE_PROJECT_URL: ${{ vars.WOPEE_PROJECT_URL || 'https://dronjo.wopee.io' }}
      #   WOPEE_SCREENSHOT_VALIDATION_ENABLED: "true"
      #   WOPEE_BRANCH_NAME: master
      #   WOPEE_CI_BUILD_ID: build-123
      #   WOPEE_CUSTOM_TAGS: custom-tag
      #   WOPEE_ENABLE_SOFT_ASSERT: "true"
      #   WOPEE_PIXEL_TO_PIXEL_DIFF_TOLERANCE: "0.1"
      #   WOPEE_COLLECT_PAGE_CONTENT: "true"
      #   BASIC_AUTH_USER: ${{ secrets.BASIC_AUTH_USER }}
      #   BASIC_AUTH_PASSWORD: ${{ secrets.BASIC_AUTH_PASSWORD }}
      shell: bash
      run: |
        npm install --prefer-offline --no-audit
        npx playwright install
        npx playwright install ffmpeg
        npm run test

    - name: Confirm end of run
      if: always()
      shell: bash
      run: |

        ERROR_FLAG=false
        if [ "${{ job.status }}" = "failure" ]; then
          ERROR_FLAG=true
        fi

        if [ "${{ github.event.action }}" = "code" ]; then

          JSON_PAYLOAD=$(cat <<-EOF
          {
            "query": "mutation PostProcessAgentSuite(\$input: PostProcessAgentSuiteInput!) { postProcessAgentSuite(input: \$input) }",
            "variables": {
              "input": {
                "error": $ERROR_FLAG,
                "projectUuid": "${{ env.WOPEE_PROJECT_UUID }}",
                "suiteUuid": "${{ env.WOPEE_SUITE_UUID }}",
                "testCase": {
                  "testCaseId": "${{ env.WOPEE_TEST_CASE_ID }}",
                  "userStoryId": "${{ env.WOPEE_USER_STORY_ID }}"
                }
              }
            }
          }
        EOF
          )
        fi

        curl --request POST \
          --header 'content-type: application/json' \
          --header 'api_key: ${{ env.WOPEE_API_KEY }}' \
          --url '${{ env.WOPEE_API_URL }}' \
          --data "$JSON_PAYLOAD"
          
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-results
        path: |
          test-results
          playwright-report
        retention-days: 1